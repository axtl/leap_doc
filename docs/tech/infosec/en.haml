- @title = "Architecture comparison"
- @summary = "A comparison of the trade-offs made by different communication archectures"

= render_local_template 'table-style'

%h1.first You can't have it all

%p Every messaging architecture makes certain design choices that privilege one property of information security over another. Although there is no intrinsically necessary trade off among different information security properties, when we examine the technical limitations of actual implementations we see clearly that existing architectures are structurally biased toward certain properties and against others.

%h1 A fancy table

%p This table provides a rough comparison of the choices made by common messaging architectures. See #{link 'below for details' => '#table-notes'} regarding the column and row headings.

.p
  %b Table 1. Information security of common messaging architectures
  = render_local_template 'table', :table_type => :big

%p Reasonable people may disagree: this table represents one defensible assessment of the various architecture categories. Many people would adjust one or two cells, but on the whole we believe this table is a fair and accurate comparison. Some squares get low marks because of user error. For example, peer-to-peer systems have a hard time with user friendly keys, leading to high user error and low effective authenticity.

%p In table 2 we see a simplified representation that highlights the relative differences between the encrypted architectures:

.p
  %b Table 2. Relative trade-offs of encrypted messaging architectures
  = render_local_template 'table', :table_type => :small

%p Relatively better is not necessarily good. For example, federated and peer-to-peer models have better authenticity than silo models, but still in practice have many authenticity problems.

%h1 The LEAP strategy

%p In a nutshell, the LEAP strategy is this: take a federated architecture and improve the authenticity, unmappability, and usability. In table form, that looks like this:

.p
  %b Table 3. The LEAP strategy for improving federated architectures
  = render_local_template 'table', :table_type => :leap

%p Why this focus on authenticity, unmappability, and usability?

%p First, there is a lot of room for improvement. We believe that there is actually no particular structural reason why these properties are so low in existing federated encrypted architectures.

%p Second, these property are extremely important and yet are typically given low priority or are ignored completely.

%ul
  %li
    %b Authenticity:
    Message security rests entirely on a foundation of authenticity. Without proper validation of encryption keys, you cannot be assured of confidentiality or integrity. Unfortunately, current system of establishing message authenticity are so difficult to use that most users simply ignore this step. LEAP will address these problems with a system of #{link 'strong and automatic identity validation' => 'nicknym'}.
  %li
    %b Usability:
    There are plenty of high security tools that are nearly impossible for the common user to use correctly. If the tool is too difficult, it will not be widely adopted and will likely be used incorrectly by those who do adopt it. LEAP with address these problems with the #{link 'LEAP client' => 'client'} that is tightly coupled with the server-side software and is autoconfiguring.
  %li
    %b Unmappability:
    Recent advances in social network analysis and the greatly expanded of ability state and corporate actors to gather social graph information have made unmappability an urgent requirement for any architecture that seeks to address the surveillance situation we face today. LEAP will address these problems with our proposal for #{link 'graph resistant routing' => 'routing'}.

%p Improvement in these areas will come at a price. Although LEAP communication tools will be backward compatible with existing federated standards, a user of the LEAP platform will not have the same degree of choice in client software and provider as does a user of a traditional federated system. Our goal is to actively help providers adopt the LEAP platform, in order to give users more options in the long run.

%h1#table-notes Decoding the table

%h2 Communication architectures (columns)

(to be written)

%h2 Aspects of information security (rows)

%p Classical information security consists of a trio of properties: confidentiality, integrity, availability. To this list, others have added authenticity, control, and anonymity (among many others).

%p For our purposes here, we also add usability, compatibility, and unmappability. What do all these mean? Let's use the example of a single message, and group these nine properties in three categories:

%h3 Message Security

%table.properties
  %tr
    %th Confidentiality
    %td A message has highly confidentiality if only the intended recipients are able to read the message.
  %tr
    %th Integrity
    %td A message has high integrity if the recipient is assured the message has not been altered.
  %tr
    %th Availability
    %td A message has high availability if the user is able to get to the message when they so desire.

%h3 Identity Security

%table.properties
  %tr
    %th Authenticity
    %td A message has high authenticity if the recipient is certain who sent the message and the sender is certain who received it.
  %tr
    %th Anonymity
    %td A message has high anonymity if the identity of the sender cannot be established by examining the message or the pattern of message delivery.
  %tr
    %th Unmappability
    %td A message has high unmappability if the social network that you communicate with cannot be easily discovered. Unmappability is often collapsed under anonymity. This is unfortunate. It is true the anonymity is one of the issue at stake with social network mapping, but it is just one of many. Because of recent advances in social network analysis and the ability to gather social graph information, we feel that unmappability deserves to be highlighted on its own.

%h3 User Freedom

%table.properties
  %tr
    %th Control
    %td If a user is in possession of their own data and can do with it exactly what they want (and others cannot use the data in ways contrary to the wishes of the user), then we say that they have high control.
  %tr
    %th Usability
    %td For a communication system to have high usability, the common user must be able to operate the system in a way that does not compromise their security.
  %tr
    %th Compatibility
    %td For a system to have high compatibility, the user must not be locked into a particular provider or technology, but should have competing and compatible options available to them. In other words, a user's data should be portable and they should have a choice of clients.
